{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>colors-core</code>","text":"<p>Core color functionality.</p>"},{"location":"#installing","title":"Installing","text":"<p>Python 3.7 or above is required.</p>"},{"location":"#pip","title":"pip","text":"<p>Installing the library with <code>pip</code> is quite simple:</p> <pre><code>$ pip install colors-core\n</code></pre> <p>Alternatively, the library can be installed from source:</p> <pre><code>$ git clone https://github.com/nekitdev/colors-core.git\n$ cd colors-core\n$ python -m pip install .\n</code></pre>"},{"location":"#poetry","title":"poetry","text":"<p>You can add <code>colors-core</code> as a dependency with the following command:</p> <pre><code>$ poetry add colors-core\n</code></pre> <p>Or by directly specifying it in the configuration like so:</p> <pre><code>[tool.poetry.dependencies]\ncolors-core = \"^1.0.0\"\n</code></pre> <p>Alternatively, you can add it directly from the source:</p> <pre><code>[tool.poetry.dependencies.colors-core]\ngit = \"https://github.com/nekitdev/colors-core.git\"\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<pre><code>&gt;&gt;&gt; from colors import Color\n&gt;&gt;&gt; color = Color(0x000000)\n&gt;&gt;&gt; print(color)\n#000000\n&gt;&gt;&gt; color.to_rgb()\n(0, 0, 0)\n&gt;&gt;&gt; color.to_rgba(0)\n(0, 0, 0, 0)\n&gt;&gt;&gt; color.to_hsv()\n(0.0, 0.0, 0.0)\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>You can find the documentation here.</p>"},{"location":"#support","title":"Support","text":"<p>If you need support with the library, you can send an email or refer to the official Discord server.</p>"},{"location":"#changelog","title":"Changelog","text":"<p>You can find the changelog here.</p>"},{"location":"#security-policy","title":"Security Policy","text":"<p>You can find the Security Policy of <code>colors-core</code> here.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you are interested in contributing to <code>colors-core</code>, make sure to take a look at the Contributing Guide, as well as the Code of Conduct.</p>"},{"location":"#license","title":"License","text":"<p><code>colors-core</code> is licensed under the MIT License terms. See License for details.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#100-2023-04-12","title":"1.0.0 (2023-04-12)","text":"<p>Initial release.</p>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement to conduct@nekit.dev.</p> <p>All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://contributor-covenant.org/version/2/1/code_of_conduct.</p> <p>Community Impact Guidelines were inspired by Mozilla's Code of Conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://contributor-covenant.org/faq. Translations are available at https://contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing Guide","text":""},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#colors.core.Color","title":"<code>Color</code>","text":"Source code in <code>colors/core.py</code> <pre><code>@frozen(order=True)\nclass Color:\n    value: int = field(default=BLACK, repr=hex_value)\n\"\"\"The color value in range from [`BLACK`][colors.constants.BLACK]\n    to [`WHITE`][colors.constants.WHITE] (both inclusive).\n    \"\"\"\n\n    @value.validator\n    def validate_value(self, attribute: Attribute[int], value: int) -&gt; None:\n        validate_value(value)\n\n    @classmethod\n    def black(cls: Type[C]) -&gt; C:\n\"\"\"Creates a color with the [`BLACK`][colors.constants.BLACK] value.\n\n        Returns:\n            The color with the black value.\n        \"\"\"\n        return cls(BLACK)\n\n    @classmethod\n    def white(cls: Type[C]) -&gt; C:\n\"\"\"Creates a color with the [`WHITE`][colors.constants.WHITE] value.\n\n        Returns:\n            The color with the white value.\n        \"\"\"\n        return cls(WHITE)\n\n    def is_black(self) -&gt; bool:\n\"\"\"Checks if the color has the [`BLACK`][colors.constants.BLACK] value.\n\n        Returns:\n            Whether the color has the black value.\n        \"\"\"\n        return self.value == BLACK\n\n    def is_white(self) -&gt; bool:\n\"\"\"Checks if the color has the [`WHITE`][colors.constants.WHITE] value.\n\n        Returns:\n            Whether the color has the white value.\n        \"\"\"\n        return self.value == WHITE\n\n    def get_byte(self, byte: int) -&gt; int:\n\"\"\"Fetches the byte from the color value.\n\n        Arguments:\n            byte: The byte index.\n\n        Returns:\n            The byte value.\n        \"\"\"\n        return (self.value &gt;&gt; (BITS * byte)) &amp; BYTE\n\n    @property\n    def red(self) -&gt; int:\n\"\"\"The red channel value.\"\"\"\n        return self.get_byte(RED_BYTE)\n\n    @property\n    def green(self) -&gt; int:\n\"\"\"The green channel value.\"\"\"\n        return self.get_byte(GREEN_BYTE)\n\n    @property\n    def blue(self) -&gt; int:\n\"\"\"The blue channel value.\"\"\"\n        return self.get_byte(BLUE_BYTE)\n\n    r = red\n\"\"\"An alias of [`red`][colors.core.Color.red].\"\"\"\n    g = green\n\"\"\"An alias of [`green`][colors.core.Color.green].\"\"\"\n    b = blue\n\"\"\"An alias of [`blue`][colors.core.Color.blue].\"\"\"\n\n    def ansi_escape(self, string: Optional[str] = None) -&gt; str:\n\"\"\"Paints the `string` with the color using ANSI escape sequences.\n\n        If the `string` is not given, [`color.to_hex()`][colors.core.Color.to_hex] will be used.\n\n        Arguments:\n            string: The string to paint.\n\n        Returns:\n            The painted string.\n        \"\"\"\n        if string is None:\n            string = self.to_hex()\n\n        red, green, blue = self.to_rgb()\n\n        return ANSI_COLOR.format(red, green, blue) + string + ANSI_RESET\n\n    paint = ansi_escape\n\"\"\"An alias of [`ansi_escape`][colors.core.Color.ansi_escape].\"\"\"\n\n    @classmethod\n    def from_hex(cls: Type[C], string: str) -&gt; C:\n\"\"\"Creates a color from the hex `string` (e.g. `#000000`, `0x000000`, or simply `000000`).\n\n        This method uses the [`int`][int] function with the hex base to parse the string,\n        replacing `#` with `0x`.\n\n        Arguments:\n            string: The hex string.\n\n        Returns:\n            The color with the parsed hex value.\n        \"\"\"\n        return cls(int(string.replace(HEX_STRING_PREFIX, HEX_VALUE_PREFIX), HEX_BASE))\n\n    def to_hex(self) -&gt; str:\n\"\"\"Converts the color to the hex string (e.g. `#FFFFFF`).\n\n        Returns:\n            The color hex string.\n        \"\"\"\n        return hex_string(self.value)\n\n    def to_hex_value(self) -&gt; str:\n\"\"\"Converts the color to the hex *value* string (e.g. `0xFFFFFF`).\n\n        Returns:\n            The color hex *value* string.\n        \"\"\"\n        return hex_value(self.value)\n\n    @classmethod\n    def from_rgb(cls: Type[C], red: int, green: int, blue: int) -&gt; C:\n\"\"\"Creates a color from *RGB* values (each in `[0, 255]` range).\n\n        Arguments:\n            red: The red channel value.\n            green: The green channel value.\n            blue: The blue channel value.\n\n        Returns:\n            The color created from *RGB* values.\n        \"\"\"\n        return cls(value_from_rgb(red, green, blue))\n\n    def to_rgb(self) -&gt; RGB:\n\"\"\"Converts the color to *RGB* values (each in `[0, 255]` range).\n\n        Returns:\n            The *RGB* values.\n        \"\"\"\n        return (self.red, self.blue, self.green)\n\n    @classmethod\n    def from_rgba(cls: Type[C], red: int, green: int, blue: int, alpha: int) -&gt; C:\n\"\"\"Creates a color from *RGBA* values (each in `[0, 255]` range).\n\n        Note:\n            The *alpha* channel is simply ignored.\n\n        Arguments:\n            red: The red channel value.\n            green: The green channel value.\n            blue: The blue channel value.\n            alpha: The alpha channel value.\n\n        Returns:\n            The color created from *RGBA* channel values.\n        \"\"\"\n        return cls.from_rgb(red, green, blue)\n\n    def to_rgba(self, alpha: int = BYTE) -&gt; RGBA:\n\"\"\"Converts the color to *RGBA* channel values (each in `[0, 255]` range).\n\n        Arguments:\n            alpha: The alpha channel value.\n\n        Returns:\n            The *RGBA* values.\n        \"\"\"\n        return (self.red, self.green, self.blue, alpha)\n\n    @classmethod\n    def from_hsv(cls: Type[C], hue: float, saturation: float, value: float) -&gt; C:\n\"\"\"Creates a color from *HSV* values (each in `[0, 1]` range).\n\n        Arguments:\n            hue: The hue of the color.\n            saturation: The saturation of the color.\n            value: The value of the color.\n\n        Returns:\n            The color created from *HSV* values.\n        \"\"\"\n        red, green, blue = map(float_to_byte, hsv_to_rgb(hue, saturation, value))\n\n        return cls.from_rgb(red, green, blue)\n\n    def to_hsv(self) -&gt; HSV:\n\"\"\"Converts the color to *HSV* values (each in `[0, 1]` range).\n\n        Returns:\n            The *HSV* values.\n        \"\"\"\n        red, green, blue = map(byte_to_float, self.to_rgb())\n\n        return rgb_to_hsv(red, green, blue)\n</code></pre>"},{"location":"reference/#colors.core.Color.value","title":"<code>value: int = field(default=BLACK, repr=hex_value)</code>  <code>class-attribute</code>","text":"<p>The color value in range from <code>BLACK</code> to <code>WHITE</code> (both inclusive).</p>"},{"location":"reference/#colors.core.Color.red","title":"<code>red: int</code>  <code>property</code>","text":"<p>The red channel value.</p>"},{"location":"reference/#colors.core.Color.green","title":"<code>green: int</code>  <code>property</code>","text":"<p>The green channel value.</p>"},{"location":"reference/#colors.core.Color.blue","title":"<code>blue: int</code>  <code>property</code>","text":"<p>The blue channel value.</p>"},{"location":"reference/#colors.core.Color.r","title":"<code>r = red</code>  <code>class-attribute</code>","text":"<p>An alias of <code>red</code>.</p>"},{"location":"reference/#colors.core.Color.g","title":"<code>g = green</code>  <code>class-attribute</code>","text":"<p>An alias of <code>green</code>.</p>"},{"location":"reference/#colors.core.Color.b","title":"<code>b = blue</code>  <code>class-attribute</code>","text":"<p>An alias of <code>blue</code>.</p>"},{"location":"reference/#colors.core.Color.paint","title":"<code>paint = ansi_escape</code>  <code>class-attribute</code>","text":"<p>An alias of <code>ansi_escape</code>.</p>"},{"location":"reference/#colors.core.Color.black","title":"<code>black() -&gt; C</code>  <code>classmethod</code>","text":"<p>Creates a color with the <code>BLACK</code> value.</p> <p>Returns:</p> Type Description <code>C</code> <p>The color with the black value.</p> Source code in <code>colors/core.py</code> <pre><code>@classmethod\ndef black(cls: Type[C]) -&gt; C:\n\"\"\"Creates a color with the [`BLACK`][colors.constants.BLACK] value.\n\n    Returns:\n        The color with the black value.\n    \"\"\"\n    return cls(BLACK)\n</code></pre>"},{"location":"reference/#colors.core.Color.white","title":"<code>white() -&gt; C</code>  <code>classmethod</code>","text":"<p>Creates a color with the <code>WHITE</code> value.</p> <p>Returns:</p> Type Description <code>C</code> <p>The color with the white value.</p> Source code in <code>colors/core.py</code> <pre><code>@classmethod\ndef white(cls: Type[C]) -&gt; C:\n\"\"\"Creates a color with the [`WHITE`][colors.constants.WHITE] value.\n\n    Returns:\n        The color with the white value.\n    \"\"\"\n    return cls(WHITE)\n</code></pre>"},{"location":"reference/#colors.core.Color.is_black","title":"<code>is_black() -&gt; bool</code>","text":"<p>Checks if the color has the <code>BLACK</code> value.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the color has the black value.</p> Source code in <code>colors/core.py</code> <pre><code>def is_black(self) -&gt; bool:\n\"\"\"Checks if the color has the [`BLACK`][colors.constants.BLACK] value.\n\n    Returns:\n        Whether the color has the black value.\n    \"\"\"\n    return self.value == BLACK\n</code></pre>"},{"location":"reference/#colors.core.Color.is_white","title":"<code>is_white() -&gt; bool</code>","text":"<p>Checks if the color has the <code>WHITE</code> value.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the color has the white value.</p> Source code in <code>colors/core.py</code> <pre><code>def is_white(self) -&gt; bool:\n\"\"\"Checks if the color has the [`WHITE`][colors.constants.WHITE] value.\n\n    Returns:\n        Whether the color has the white value.\n    \"\"\"\n    return self.value == WHITE\n</code></pre>"},{"location":"reference/#colors.core.Color.get_byte","title":"<code>get_byte(byte: int) -&gt; int</code>","text":"<p>Fetches the byte from the color value.</p> <p>Parameters:</p> Name Type Description Default <code>byte</code> <code>int</code> <p>The byte index.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The byte value.</p> Source code in <code>colors/core.py</code> <pre><code>def get_byte(self, byte: int) -&gt; int:\n\"\"\"Fetches the byte from the color value.\n\n    Arguments:\n        byte: The byte index.\n\n    Returns:\n        The byte value.\n    \"\"\"\n    return (self.value &gt;&gt; (BITS * byte)) &amp; BYTE\n</code></pre>"},{"location":"reference/#colors.core.Color.ansi_escape","title":"<code>ansi_escape(string: Optional[str] = None) -&gt; str</code>","text":"<p>Paints the <code>string</code> with the color using ANSI escape sequences.</p> <p>If the <code>string</code> is not given, <code>color.to_hex()</code> will be used.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>Optional[str]</code> <p>The string to paint.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The painted string.</p> Source code in <code>colors/core.py</code> <pre><code>def ansi_escape(self, string: Optional[str] = None) -&gt; str:\n\"\"\"Paints the `string` with the color using ANSI escape sequences.\n\n    If the `string` is not given, [`color.to_hex()`][colors.core.Color.to_hex] will be used.\n\n    Arguments:\n        string: The string to paint.\n\n    Returns:\n        The painted string.\n    \"\"\"\n    if string is None:\n        string = self.to_hex()\n\n    red, green, blue = self.to_rgb()\n\n    return ANSI_COLOR.format(red, green, blue) + string + ANSI_RESET\n</code></pre>"},{"location":"reference/#colors.core.Color.from_hex","title":"<code>from_hex(string: str) -&gt; C</code>  <code>classmethod</code>","text":"<p>Creates a color from the hex <code>string</code> (e.g. <code>#000000</code>, <code>0x000000</code>, or simply <code>000000</code>).</p> <p>This method uses the <code>int</code> function with the hex base to parse the string, replacing <code>#</code> with <code>0x</code>.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>The hex string.</p> required <p>Returns:</p> Type Description <code>C</code> <p>The color with the parsed hex value.</p> Source code in <code>colors/core.py</code> <pre><code>@classmethod\ndef from_hex(cls: Type[C], string: str) -&gt; C:\n\"\"\"Creates a color from the hex `string` (e.g. `#000000`, `0x000000`, or simply `000000`).\n\n    This method uses the [`int`][int] function with the hex base to parse the string,\n    replacing `#` with `0x`.\n\n    Arguments:\n        string: The hex string.\n\n    Returns:\n        The color with the parsed hex value.\n    \"\"\"\n    return cls(int(string.replace(HEX_STRING_PREFIX, HEX_VALUE_PREFIX), HEX_BASE))\n</code></pre>"},{"location":"reference/#colors.core.Color.to_hex","title":"<code>to_hex() -&gt; str</code>","text":"<p>Converts the color to the hex string (e.g. <code>#FFFFFF</code>).</p> <p>Returns:</p> Type Description <code>str</code> <p>The color hex string.</p> Source code in <code>colors/core.py</code> <pre><code>def to_hex(self) -&gt; str:\n\"\"\"Converts the color to the hex string (e.g. `#FFFFFF`).\n\n    Returns:\n        The color hex string.\n    \"\"\"\n    return hex_string(self.value)\n</code></pre>"},{"location":"reference/#colors.core.Color.to_hex_value","title":"<code>to_hex_value() -&gt; str</code>","text":"<p>Converts the color to the hex value string (e.g. <code>0xFFFFFF</code>).</p> <p>Returns:</p> Type Description <code>str</code> <p>The color hex value string.</p> Source code in <code>colors/core.py</code> <pre><code>def to_hex_value(self) -&gt; str:\n\"\"\"Converts the color to the hex *value* string (e.g. `0xFFFFFF`).\n\n    Returns:\n        The color hex *value* string.\n    \"\"\"\n    return hex_value(self.value)\n</code></pre>"},{"location":"reference/#colors.core.Color.from_rgb","title":"<code>from_rgb(red: int, green: int, blue: int) -&gt; C</code>  <code>classmethod</code>","text":"<p>Creates a color from RGB values (each in <code>[0, 255]</code> range).</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>int</code> <p>The red channel value.</p> required <code>green</code> <code>int</code> <p>The green channel value.</p> required <code>blue</code> <code>int</code> <p>The blue channel value.</p> required <p>Returns:</p> Type Description <code>C</code> <p>The color created from RGB values.</p> Source code in <code>colors/core.py</code> <pre><code>@classmethod\ndef from_rgb(cls: Type[C], red: int, green: int, blue: int) -&gt; C:\n\"\"\"Creates a color from *RGB* values (each in `[0, 255]` range).\n\n    Arguments:\n        red: The red channel value.\n        green: The green channel value.\n        blue: The blue channel value.\n\n    Returns:\n        The color created from *RGB* values.\n    \"\"\"\n    return cls(value_from_rgb(red, green, blue))\n</code></pre>"},{"location":"reference/#colors.core.Color.to_rgb","title":"<code>to_rgb() -&gt; RGB</code>","text":"<p>Converts the color to RGB values (each in <code>[0, 255]</code> range).</p> <p>Returns:</p> Type Description <code>RGB</code> <p>The RGB values.</p> Source code in <code>colors/core.py</code> <pre><code>def to_rgb(self) -&gt; RGB:\n\"\"\"Converts the color to *RGB* values (each in `[0, 255]` range).\n\n    Returns:\n        The *RGB* values.\n    \"\"\"\n    return (self.red, self.blue, self.green)\n</code></pre>"},{"location":"reference/#colors.core.Color.from_rgba","title":"<code>from_rgba(red: int, green: int, blue: int, alpha: int) -&gt; C</code>  <code>classmethod</code>","text":"<p>Creates a color from RGBA values (each in <code>[0, 255]</code> range).</p> Note <p>The alpha channel is simply ignored.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>int</code> <p>The red channel value.</p> required <code>green</code> <code>int</code> <p>The green channel value.</p> required <code>blue</code> <code>int</code> <p>The blue channel value.</p> required <code>alpha</code> <code>int</code> <p>The alpha channel value.</p> required <p>Returns:</p> Type Description <code>C</code> <p>The color created from RGBA channel values.</p> Source code in <code>colors/core.py</code> <pre><code>@classmethod\ndef from_rgba(cls: Type[C], red: int, green: int, blue: int, alpha: int) -&gt; C:\n\"\"\"Creates a color from *RGBA* values (each in `[0, 255]` range).\n\n    Note:\n        The *alpha* channel is simply ignored.\n\n    Arguments:\n        red: The red channel value.\n        green: The green channel value.\n        blue: The blue channel value.\n        alpha: The alpha channel value.\n\n    Returns:\n        The color created from *RGBA* channel values.\n    \"\"\"\n    return cls.from_rgb(red, green, blue)\n</code></pre>"},{"location":"reference/#colors.core.Color.to_rgba","title":"<code>to_rgba(alpha: int = BYTE) -&gt; RGBA</code>","text":"<p>Converts the color to RGBA channel values (each in <code>[0, 255]</code> range).</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>int</code> <p>The alpha channel value.</p> <code>BYTE</code> <p>Returns:</p> Type Description <code>RGBA</code> <p>The RGBA values.</p> Source code in <code>colors/core.py</code> <pre><code>def to_rgba(self, alpha: int = BYTE) -&gt; RGBA:\n\"\"\"Converts the color to *RGBA* channel values (each in `[0, 255]` range).\n\n    Arguments:\n        alpha: The alpha channel value.\n\n    Returns:\n        The *RGBA* values.\n    \"\"\"\n    return (self.red, self.green, self.blue, alpha)\n</code></pre>"},{"location":"reference/#colors.core.Color.from_hsv","title":"<code>from_hsv(hue: float, saturation: float, value: float) -&gt; C</code>  <code>classmethod</code>","text":"<p>Creates a color from HSV values (each in <code>[0, 1]</code> range).</p> <p>Parameters:</p> Name Type Description Default <code>hue</code> <code>float</code> <p>The hue of the color.</p> required <code>saturation</code> <code>float</code> <p>The saturation of the color.</p> required <code>value</code> <code>float</code> <p>The value of the color.</p> required <p>Returns:</p> Type Description <code>C</code> <p>The color created from HSV values.</p> Source code in <code>colors/core.py</code> <pre><code>@classmethod\ndef from_hsv(cls: Type[C], hue: float, saturation: float, value: float) -&gt; C:\n\"\"\"Creates a color from *HSV* values (each in `[0, 1]` range).\n\n    Arguments:\n        hue: The hue of the color.\n        saturation: The saturation of the color.\n        value: The value of the color.\n\n    Returns:\n        The color created from *HSV* values.\n    \"\"\"\n    red, green, blue = map(float_to_byte, hsv_to_rgb(hue, saturation, value))\n\n    return cls.from_rgb(red, green, blue)\n</code></pre>"},{"location":"reference/#colors.core.Color.to_hsv","title":"<code>to_hsv() -&gt; HSV</code>","text":"<p>Converts the color to HSV values (each in <code>[0, 1]</code> range).</p> <p>Returns:</p> Type Description <code>HSV</code> <p>The HSV values.</p> Source code in <code>colors/core.py</code> <pre><code>def to_hsv(self) -&gt; HSV:\n\"\"\"Converts the color to *HSV* values (each in `[0, 1]` range).\n\n    Returns:\n        The *HSV* values.\n    \"\"\"\n    red, green, blue = map(byte_to_float, self.to_rgb())\n\n    return rgb_to_hsv(red, green, blue)\n</code></pre>"},{"location":"reference/#colors.constants.ZERO","title":"<code>ZERO = 0</code>  <code>module-attribute</code>","text":"<p>The zero byte value.</p>"},{"location":"reference/#colors.constants.BYTE","title":"<code>BYTE = 255</code>  <code>module-attribute</code>","text":"<p>The full byte value.</p>"},{"location":"reference/#colors.constants.BITS","title":"<code>BITS = BYTE.bit_length()</code>  <code>module-attribute</code>","text":"<p>The amount of bits in one byte.</p>"},{"location":"reference/#colors.constants.DOUBLE_BITS","title":"<code>DOUBLE_BITS = BITS + BITS</code>  <code>module-attribute</code>","text":"<p>The amount of bits in two bytes.</p>"},{"location":"reference/#colors.constants.BLACK","title":"<code>BLACK = 0</code>  <code>module-attribute</code>","text":"<p>The black color value.</p>"},{"location":"reference/#colors.constants.WHITE","title":"<code>WHITE = 16777215</code>  <code>module-attribute</code>","text":"<p>The white color value.</p>"},{"location":"reference/#colors.constants.RED_BYTE","title":"<code>RED_BYTE = 2</code>  <code>module-attribute</code>","text":"<p>The byte representing the red channel.</p>"},{"location":"reference/#colors.constants.GREEN_BYTE","title":"<code>GREEN_BYTE = 1</code>  <code>module-attribute</code>","text":"<p>The byte representing the green channel.</p>"},{"location":"reference/#colors.constants.BLUE_BYTE","title":"<code>BLUE_BYTE = 0</code>  <code>module-attribute</code>","text":"<p>The byte representing the blue channel.</p>"},{"location":"reference/#colors.typing.RGB","title":"<code>RGB = Tuple[int, int, int]</code>  <code>module-attribute</code>","text":"<p>Represents RGB color tuples.</p>"},{"location":"reference/#colors.typing.RGBA","title":"<code>RGBA = Tuple[int, int, int, int]</code>  <code>module-attribute</code>","text":"<p>Represents RGBA color tuples.</p>"},{"location":"reference/#colors.typing.HSV","title":"<code>HSV = Tuple[float, float, float]</code>  <code>module-attribute</code>","text":"<p>Represents HSV color tuples.</p>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#reporting","title":"Reporting","text":"<p>Thank you for taking the time to responsibly disclose any problems you find.</p> <p>Do not file public issues as they are open for everyone to see!</p> <p>All security vulnerabilities in <code>colors-core</code> should be reported by email to security@nekit.dev. Your report will be acknowledged within 24 hours, and you will receive a more detailed response within 48 hours indicating the next steps in handling your report.</p> <p>You can encrypt your report using our public key: <code>BB2D8194464001E0B9B60EB8741A1EAD20FFDE8A</code>. This key is also available on MIT's Key Server and reproduced below.</p> <p>After the initial reply to your report, the core team will try to keep you informed of the progress being made towards a fix and official announcement. These updates will be sent at least every five days. In reality, this is more likely to be every 24-48 hours.</p>"},{"location":"security/#disclosure-policy","title":"Disclosure Policy","text":"<p><code>colors-core</code> has a 5-step disclosure process:</p> <ol> <li> <p>The security report is received and is assigned a primary handler.    This person will coordinate the fix and release process.</p> </li> <li> <p>The problem is confirmed and a list of all affected versions is determined.</p> </li> <li> <p>Code is audited to find any potential similar problems.</p> </li> <li> <p>Fixes are prepared for all releases which are still under maintenance.    These fixes are not committed to the public repository but rather    held locally pending the announcement.</p> </li> <li> <p>On the embargo date, the changes are pushed to the public repository    and new builds are deployed.</p> </li> </ol> <p>This process can take some time, especially when coordination is required with maintainers of other projects. Every effort will be made to handle the issue in as timely a manner as possible, however it is important that we follow the release process above to ensure that the disclosure is handled in a consistent manner.</p>"},{"location":"security/#security-key","title":"Security Key","text":"<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\n1oYi7ft0FnZ67Wnk5+E+\n=VRe2\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>"},{"location":"security/#attribution","title":"Attribution","text":"<p>This Security Policy is adapted from Rust's Security Policy.</p>"}]}